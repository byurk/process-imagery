---
title: "Process Imagery"
author: "Jackson Krebsbach"
date: "1/9/2024"
output: html_document
---


## Load packages

```{r, echo = FALSE, results = "hide", message=FALSE, echo = FALSE}
library(tidyverse)
library(multidplyr)
library(stringr)
library(reticulate)
```

## Source image processing functions

```{r, echo = FALSE, results = "hide", message=FALSE, echo = FALSE}
source("src/file-utilities.R")
source("src/color-space-transform.R")
source("src/calculate-texture.R")
source("src/meanshift-segmentation.R")
```

## Layers

We want combinations of approximately the following layers.

rgb_seg_SR6_RR4.5_MD30_hsv_1 +
hsv_2 +
rgb_seg_SR6_RR4.5_MD70_hsv_2 +
yuv_contrast_L1_W11 +
hsv_contrast_L2_W11 +
hsv_contrast_L3_W11 +
lab_contrast_L1_W11 +
yuv_contrast_L2_W11 +
rgb_seg_SR6_RR4.5_MD70_lab_3 +
rgb_seg_SR6_RR7.5_MD50_2 +
rgb_seg_SR6_RR7.5_MD30_yuv_1 +
rgb_seg_SR3_RR4.5_MD50_hsv_1 + #adding back in some 'redundant' layers
rgb_seg_SR6_RR7.5_MD70_hsv_1 +
rgb_seg_SR3_RR4.5_MD30_hsv_2 +
rgb_seg_SR3_RR7.5_MD50_hsv_2,

## Set up Cluster

```{r Cluster setup}

cl <- new_cluster(10) |>
  cluster_library("tidyverse") |>
  cluster_library("terra") |>
  cluster_library("stringr") |>
  cluster_library("glcm") |>
  cluster_library("imager") |>
  cluster_library("raster") |>
  cluster_library("reticulate") |>
  cluster_copy("color_transform") |>
  cluster_copy("get_color_space") |>
  cluster_copy("calculate_texture") |>
  cluster_copy("get_file_directory") |>
  cluster_copy("get_file_name") |>
  cluster_copy("color_outpath") |>
  cluster_copy("segmentation_outpath") |>
  cluster_copy("texture_outpath") |>
  cluster_copy("parallel_color_transforms") |>
  cluster_copy("parallel_texture_calculation") |>
  cluster_copy("segment") |>
  cluster_copy("parallel_image_segmentation")
```



## File Paths of 50 Photographs

```{r Read in file paths}
file_paths <-  tibble(inpath= sprintf("clean_data/quadrats/quadrat%02d/rgb.tif", seq(34, 83, 1))) 
file_paths
```


## Image Segmentation

```{r Image Segmentation}

segment_spatial <- tibble(spatial_radius = c(3,6))
segment_spectral <-tibble(range_radius = c(4.5, 7.5))
segment_denisty <-tibble(min_density = c(30, 50, 70))

segment_parameters <- dplyr::tibble(inpath = file_paths$inpath) |>
  cross_join(segment_spatial) |> 
  cross_join(segment_spectral) |>
  cross_join(segment_denisty)

segment_out <- segment_parameters |>
  mutate(inpath_exists = file.exists(inpath)) |>
  partition(cl) |>
  mutate(outpath = parallel_image_segmentation(inpath, spatial_radius,
                                               range_radius, min_density,
                                               do_computation = TRUE, over_write = FALSE)) |>
  mutate(outpath_exists = file.exists(outpath)) |>
  collect()
segment_out 
```


## Color Space Transformations

```{r Colorspace transformations}
color_transform_functions <- tibble(transform = c("RGBtoLab", "RGBtoYUV","RGBtoHSL"))

color_parameters <- file_paths |> 
  cross_join(color_transform_functions)

color_parameters_segment <- segment_out |>
  dplyr::select(outpath) |>
  rename(inpath = outpath)|> 
  cross_join(color_transform_functions)

color_parameters_total <- rbind(color_parameters_segment, color_parameters)

color_out <- color_parameters_total |>
  mutate(inpath_exists = file.exists(inpath)) |>
  partition(cl) |>
  mutate(outpath = parallel_color_transforms(inpath, transform, do_computation = TRUE, over_write = FALSE)) |>
  mutate(outpath_exists = file.exists(outpath)) |>
  collect()

color_out
```


## Texture Calculations

```{r Texture calculations}
texture_windows <- tibble(window = c(5L,11L)) 
texture_layers <- tibble(layer = c(3L))
texture_stats <- tibble(statistic = c("contrast"))

texture_parameters <- color_out |>
  dplyr::select(outpath) |>
  rename(inpath = outpath) |>
  dplyr::select(inpath) |>
  filter(grepl("/yuv.tif|/hsv.tif|/lab.tif", inpath)) |>
  cross_join(texture_windows) |> 
  cross_join(texture_stats) |>
  cross_join(texture_layers)

texture_out <- texture_parameters |>
  mutate(inpath_exists = file.exists(inpath)) |>
  partition(cl) |>
  mutate(outpath = parallel_texture_calculation(inpath, window, statistic, layer,
                                                do_computation = TRUE, over_write = FALSE)) |>
  collect() |>
  mutate(outpath_exists = file.exists(outpath)) 
texture_out
```


